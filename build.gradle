buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'http://maven.ej-technologies.com/repository' }
        jcenter()
        flatDir {
            dirs 'lib'
        }
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath group: 'com.install4j', name: 'gradle-plugin', version: '6.0'
    }

}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = '1.0'

    ext {
        appName = 'GaiaSandbox'
        gdxVersion = '1.8.0'
        roboVMVersion = '1.4.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.4.0'
        aiVersion = '1.5.0'
		jythonVersion = '2.5.3'
		miglayoutVersion = '4.2'
        pgsVersion = '1.1.4'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    eclipse {
        classpath {
           downloadSources=true
        }
    }
}

project(":desktop") {
    apply plugin: "java"

    def cmd = "git describe --abbrev=0 --tags HEAD"
    def proc = cmd.execute()
    project.ext.tag = proc.text.trim()

    cmd = "git rev-parse --short HEAD"
    proc = cmd.execute()
    project.ext.rev = proc.text.trim()

    cmd = "uname -snmr"
    proc = cmd.execute()
    project.ext.system = proc.text.trim()

    cmd = "whoami"
    proc = cmd.execute()
    project.ext.builder = proc.text.trim()

    project.ext.buildtime = new Date()

    version = "$tag"

    println ""
    println "BUILD INFO FROM GIT"
    println "==================="
    println "git tag: $tag"
    println "git rev: $rev"
    println "buildtime: $buildtime"
    println "builder: $builder"
    println "system: $system"
    println ""


    // Set some build variables
    project.ext.baseDir = System.getProperty("user.dir")
    project.ext.tagRev = project.tag + "." + project.rev
    project.ext.distName = "gaiasandbox-$tagRev"
    project.ext.distDir = "$baseDir/releases/$distName"
    project.ext.packageName = "packages-$tagRev"
    project.ext.packageDir = "$baseDir/releases/$packageName"

    println ""
    println "BUILD VARIABLES AND INFO"
    println "========================"
    println "base dir: $baseDir"
    println "tag.rev: $tagRev"
    println "dist name: $distName"
    println "dist dir: $distDir"
    println "packages name: $packageName"
    println "packages dir: $packageDir"
    println ""

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-lwjgl3:$gdxVersion"
		compile "org.python:jython-standalone:$jythonVersion"
		compile "com.miglayout:miglayout-swing:$miglayoutVersion"
        compile "com.github.arnabk:pgslookandfeel:$pgsVersion"
		
		
		
		compile files('../core/lib/postprocessing.jar',
					'../android/assets',
                                        'lib/stil.jar')
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'Gaia Sandbox desktop',
                       'Implementation-Version': version
        }
        from('../android/assets') {
            include 'font/main-font.fnt'
            include 'font/main-font.png'
            include 'icon/ic_launcher.png'
            include 'img/**'
            include 'shader/**'
            include 'shaders/**'
            include 'skins/**'
        }
        from('build/classes/main') {
            include '**'
        }
        from('../core/build/classes/main') {
            include '**'
        }


        println "Creating desktop jar file"
    }

}



project(":html") {
    apply plugin: "gwt"
    apply plugin: "war"

	configurations.all {
		resolutionStrategy {
			failOnVersionConflict()
			force 'com.google.gwt:gwt-user:2.7.0', 'com.google.gwt:gwt-dev:2.7.0'
		}
	}

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion:sources"
    }
}

project(":core") {
    apply plugin: "java"


    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
		compile 'junit:junit:4.12'
		compile files('lib/postprocessing.jar',
                        'lib/postprocessing-sources.jar')
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'Gaia Sandbox core',
                       'Implementation-Version': version
        }
        println "Creating core jar file"
    }
}

//project(":android") {
//    apply plugin: "android"
//
//    configurations { natives }
//
//    dependencies {
//        compile project(":core")
//        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
//        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
//        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
//        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
//        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
//	compile "org.python:jython-standalone:$jythonVersion"
//        compile "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"
//	compile files('../core/lib/postprocessing.jar')
//    }
//}

tasks.eclipse.doLast {
    delete ".project"
}



task versionFile << {
    File versionFile = file('core/build/classes/main/version')
    delete versionFile
    def writer = new FileWriter(versionFile)

    try {
       writer.write('buildtime=' + project(':desktop').buildtime + '\n')
       writer.write('build=' + project(':desktop').rev + '\n')
       writer.write('version=' + project(':desktop').tag + '\n')
       writer.write('builder=' + project(':desktop').builder + '\n')
       writer.write('system=' + project(':desktop').system + '\n')
       writer.flush()
    } finally {
       writer.close()
    }
}
